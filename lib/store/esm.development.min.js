import{useState as e,useEffect as t,useCallback as r,useTreeId as n}from"fiddlehead";let a=e=>{if(e!==Object(e))throw new TypeError("The store data must be a reference type.");let t=new Set;return{get data(){return e},setData(r){r(e),t.forEach((t=>{t(e)}))},subscribe:t.add.bind(t),unsubscribe:t.delete.bind(t)}},i=(r,n,a)=>{let i=e(n(r.data));return t((()=>{let e=e=>{void 0===a?i[1](n(e)):i[1]((t=>{let r=n(e);return a(t,r)?t:r}))};return r.subscribe(e),()=>{r.unsubscribe(e)}}),[r]),i[0]},s=(e,t)=>r((r=>{e.setData((e=>{t(r,e)}))}),[e]),o=new WeakMap,d=(e,t)=>{if(e!==Object(e))throw new TypeError("The store scope must be a reference type.");let r=n(),i=o.get(r);void 0===i&&(i=new WeakMap,o.set(r,i)),i.has(e)?console.warn("The store already has been initialized."):i.set(e,a(t))},u=e=>{let t,r=n(),a=o.get(r);if(void 0!==a&&(t=a.get(e)),void 0===t)throw new ReferenceError("Attempting to access an uninitialized store.");return t},b=(e,t,r)=>{let n=u(e);return i(n,t,r)},l=(e,t)=>{let r=u(e);return s(r,t)};export{a as createStore,i as useGlobalStoreRead,s as useGlobalStoreWrite,d as useStoreInit,b as useStoreRead,l as useStoreWrite};
