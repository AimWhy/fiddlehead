import{useState as e,useEffect as t,useCallback as r,useTreeId as n}from"fiddlehead";let o=e=>{if(e!==Object(e))throw new TypeError("The store data must be a reference type.");let t=new Set;return{get data(){return e},setData(r){r(e),t.forEach((t=>{t(e)}))},subscribe:t.add.bind(t),unsubscribe:t.delete.bind(t)}},a=(r,n,o)=>{let a=e(n(r.data));return t((()=>{let e=e=>{void 0===o?a[1](n(e)):a[1]((t=>{let r=n(e);return o(t,r)?t:r}))};return r.subscribe(e),()=>{r.unsubscribe(e)}}),[r]),a[0]},i=(e,t)=>r((r=>{e.setData((e=>{t(e,r)}))}),[e]),u=new WeakMap,s=(e,t)=>{if(e!==Object(e))throw new TypeError("The store scope must be a reference type.");let r=n(),a=u.get(r);void 0===a&&(a=new WeakMap,u.set(r,a)),a.has(e)||a.set(e,o(t))},l=e=>{let t,r=n(),o=u.get(r);if(void 0!==o&&(t=o.get(e)),void 0===t)throw new ReferenceError("Attempting to access an uninitialized store.");return t},c=(e,t,r)=>{let n=l(e);return a(n,t,r)},d=(e,t)=>{let r=l(e);return i(r,t)};export{o as createStore,a as useGlobalStoreRead,i as useGlobalStoreWrite,s as useStoreInit,c as useStoreRead,d as useStoreWrite};
