import{useState as e,useEffect as t,useTreeId as r}from"fiddlehead";let n=e=>{if(e!==Object(e))throw new TypeError("The store data must be a reference type.");let t=new Set;return{get data(){return e},setData(r){r(e),t.forEach((t=>{t(e)}))},subscribe:t.add.bind(t),unsubscribe:t.delete.bind(t)}},o=(r,n,o)=>{let a=e(n(r.data));return t((()=>{let e=e=>{void 0===o?a[1](n(e)):a[1]((t=>{let r=n(e);return o(t,r)?t:r}))};return r.subscribe(e),()=>{r.unsubscribe(e)}}),[r,n,o]),a[0]},a=(e,t)=>r=>{e.setData((e=>{t(e,r)}))},i=new WeakMap,u=(e,t)=>{if(e!==Object(e))throw new TypeError("The store scope must be a reference type.");let o=r(),a=i.get(o);void 0===a&&(a=new WeakMap,i.set(o,a)),a.has(e)||a.set(e,n(t))},s=e=>{let t,n=r(),o=i.get(n);if(void 0!==o&&(t=o.get(e)),void 0===t)throw new ReferenceError("Attempting to access an uninitialized store.");return t},l=(e,t,r)=>{let n=s(e);return o(n,t,r)},c=(e,t)=>{let r=s(e);return a(r,t)};export{n as createStore,o as useGlobalStoreRead,a as useGlobalStoreWrite,u as useStoreInit,l as useStoreRead,c as useStoreWrite};
